{
  "master": {

  },
  "2-frontend": {
    "children": {
      "root": {
        "children": {

        }
      },
      "2.3-members": {
        "description": "Interface for listing and creating users, as well as assigning roles and event slots.",
        "children": {
          "root": {
            "children": {
              "create new member form": {
                "description": "The new member form has fields for name, email, and avilable roles. It has to validate input and respond with error or success based on the server response when trying to create a new user.",
                "date": 20180114,
                "children": {
                  "_newform.send": {
                    "description": "Submitting the form can only be done when all the fields have been validated. Once validated, the results have to be sent to the server in the correct order. The first and last names and the email are sent to the server to create the user. Once the user is successfully created, an activation email must be sent. Once the email has been sent successfully, the roles can be added to the user, else it is deleted.",
                    "children": {
                      "check user": "Check if the user exists by fetching records",
                      "create user": "Send a request with names and email. Username is created temporarily.",
                      "send activation email": {
                        "description": "Hit a snag where apparently this isn't a function.",
                        "children": {
                          "Member was not accessible by queryset due to 'staff' status": "SOLVED",
                        }
                      },
                      "activation email template": "Simple template to display the key for copying.",
                      "email connection refused": "Return true from email activation method for now.",
                      "adding roles": {
                        "description": "Picking up from the previous day, role creation not working for some reason. This is likely because it is failing at the serialiser and returning error that I ignore.",
                        "children": {
                          "added default='' to the nickname field in Role": "SOLVED"
                        }
                      },
                      "all working. Before doing interface effects, there appears to be a problem with the list.": {
                        "description": "",
                        "children": {
                          "likely to do with test prefiltering.": "It was. Added member id filter to filter.condition. SOLVED"
                        }
                      },
                      "error and exception handling": {
                        "description": "",
                        "children": {
                          "names are blank": "",
                          "email is blank": "",
                          "email no regex match": "",
                          "no role selected": "",
                          "member already exists": "maybe email input should be a global member search",
                          "sending activation email": "",
                          "activation email failed": "not a real email"
                        }
                      },
                      "interface updates": {
                        "children": {
                          "update member list": "",
                          "hide new panel": "",
                          "show single panel of new member": ""
                        }
                      }
                    }
                  },
                  "try email only with search": {
                    "Change title to 'invite'": "DONE"
                  },
                  "moving member interfaces to multiple files to simplify definitions": {
                    "children": {
                      "create main.js, new.js, single.js and add to html template.": "DONE",
                    }
                  }
                }
              },
            }
          },
          "2.3.1-members-multi-interface": {
            "description": "Moving constituent member interfaces to different files to better separate the functions.",
            "children": {
              "root": {
                "Create new files for each interface and add paths to app.html": "DONE",
                "Move single logic": "DONE",
                "Move new logic": "DONE",
              }
            }
          },
          "2.3.2-members-invite-member": {
            "description": "Instead of putting the burden of naming the member onto the admin, instead rely on the new member to name themselves. Also account for the possibility that the member already exists on the system, but does not have roles with this club.",
            "children": {
              "20180115": {
                "children": {
                  "add member list unrestricted by club id. Allow site wide search of members."
                  "add interaction with email input. Only show list when focussed, or when the input is empty"
                }
              }
            }
          }
        }
      },
      "2.4-account-focus": {
        "description": "Start from the point of view of the account-holder, and move through functionality in a natural way.",
        "date": 20180115,
        "children": {
          "Look at proxies": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
          "Idea of a unified interface": {
            "description": "A single interface should have a single purpose and move around the screen as a unit. When dismissing an interface, no part of it should still be needed. When recalled, it resets to a natural resting state."
          },
          "Load": {
            "description": "Open the app with a loading indicator to give the interface time to load all relevant objects into memory.",
            "children": {
              "just a bit of text": "DONE",
              "something during loading process is causing style to change": "Make sure all elements stay inside boundary, including margins, such as from float."
            }
          },
          "Account": {
            "description": "At the top of the page, the user should be able to access their user details, including password changing functions.",
            "children": {

            }
          },
          "Clubs": {
            "description": "Start from list of clubs that the member logged in is a part of.",
            "children": {
              "upcoming events"
              "invitations"
              "single": {
                "description": "Displays a single club. Most obvious thing should be a heads-up display of upcoming events for the active user."
              }
            }
          },
          "Members": {
            "description": "A list of users on the system, filtered by active club.",
            "children": {
              ""
            },
          },
          "Events": {
            "description": "A list of upcoming and past events, filtered by active club."
          },
          "Assets": {
            "description": "A list of assets, filtered by active club."
          }
        }
      }
    }
  }
}

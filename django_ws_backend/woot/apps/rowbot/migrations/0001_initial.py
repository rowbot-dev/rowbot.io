# Generated by Django 2.0.4 on 2018-04-14 15:24

import apps.base.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=255)),
                ('first_name', models.CharField(default='', max_length=255)),
                ('last_name', models.CharField(default='', max_length=255)),
                ('is_activated', models.BooleanField(default=False)),
                ('activation_email_sent', models.BooleanField(default=False)),
                ('activation_key', models.UUIDField(default=uuid.uuid4)),
                ('activation_email_key', models.CharField(default=apps.base.models.random_key, max_length=8)),
                ('is_enabled', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='AssetInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.TextField()),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='rowbot.Asset')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='AssetModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('reference', models.CharField(max_length=255)),
                ('verbose_name', models.CharField(max_length=255)),
                ('verbose_name_plural', models.CharField(max_length=255)),
                ('description', models.TextField()),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='EventInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('start_time', models.DateTimeField(null=True)),
                ('end_time', models.DateTimeField(null=True)),
                ('location', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='rowbot.Event')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='EventModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('reference', models.CharField(max_length=255)),
                ('verbose_name', models.CharField(max_length=255)),
                ('verbose_name_plural', models.CharField(max_length=255)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_models', to='rowbot.Club')),
                ('parts', models.ManyToManyField(related_name='is_part_of', to='rowbot.EventModel')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='EventNotification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(null=True)),
                ('schedule_id', models.UUIDField(default=uuid.uuid4)),
                ('is_active', models.BooleanField(default=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='rowbot.EventInstance')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='EventNotificationModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255)),
                ('relative_duration', models.DurationField()),
                ('is_negative', models.BooleanField(default=False)),
                ('is_absolute', models.BooleanField(default=False)),
                ('absolute_hour', models.IntegerField(default=0)),
                ('absolute_minute', models.IntegerField(default=0)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_models', to='rowbot.EventModel')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('nickname', models.CharField(default='', max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('is_superior_to', models.ManyToManyField(related_name='is_subordinate_to', to='rowbot.Role')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='RoleInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='rowbot.EventInstance')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='rowbot.Role')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='RoleModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('reference', models.CharField(max_length=255)),
                ('verbose_name', models.CharField(max_length=255)),
                ('verbose_name_plural', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_models', to='rowbot.Club')),
                ('is_superior_to', models.ManyToManyField(related_name='is_subordinate_to', to='rowbot.RoleModel')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('model_name', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('roles', models.ManyToManyField(related_name='permissions', to='rowbot.RoleModel')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='RoleRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.TextField()),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='records', to='rowbot.EventInstance')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='records', to='rowbot.Role')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255)),
                ('is_superset_of', models.ManyToManyField(related_name='is_subset_of', to='rowbot.Team')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='TeamInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='rowbot.EventInstance')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='rowbot.Team')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='TeamModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('reference', models.CharField(max_length=255)),
                ('verbose_name', models.CharField(max_length=255)),
                ('verbose_name_plural', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_models', to='rowbot.Club')),
                ('is_superset_of', models.ManyToManyField(related_name='is_subset_of', to='rowbot.TeamModel')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.CreateModel(
            name='TeamRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.TextField()),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_records', to='rowbot.EventInstance')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_records', to='rowbot.Team')),
            ],
            options={
                'permissions': (),
            },
        ),
        migrations.AddField(
            model_name='team',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='rowbot.TeamModel'),
        ),
        migrations.AddField(
            model_name='role',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='rowbot.RoleModel'),
        ),
        migrations.AddField(
            model_name='role',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='rowbot.Team'),
        ),
        migrations.AddField(
            model_name='event',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='rowbot.EventModel'),
        ),
        migrations.AddField(
            model_name='event',
            name='parts',
            field=models.ManyToManyField(related_name='is_part_of', to='rowbot.Event'),
        ),
        migrations.AddField(
            model_name='assetmodel',
            name='club',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asset_models', to='rowbot.Club'),
        ),
        migrations.AddField(
            model_name='assetmodel',
            name='parts',
            field=models.ManyToManyField(related_name='is_part_of', to='rowbot.AssetModel'),
        ),
        migrations.AddField(
            model_name='assetinstance',
            name='event',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='rowbot.EventInstance'),
        ),
        migrations.AddField(
            model_name='assetinstance',
            name='in_possession_of',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='external_assets', to='rowbot.Team'),
        ),
        migrations.AddField(
            model_name='assetinstance',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='rowbot.Team'),
        ),
        migrations.AddField(
            model_name='asset',
            name='club',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='rowbot.Club'),
        ),
        migrations.AddField(
            model_name='asset',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='rowbot.AssetModel'),
        ),
        migrations.AddField(
            model_name='asset',
            name='parts',
            field=models.ManyToManyField(related_name='is_part_of', to='rowbot.Asset'),
        ),
    ]
